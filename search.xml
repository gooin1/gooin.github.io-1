<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Vim chapter3]]></title>
      <url>http://yoursite.com/2016/12/22/Vim%20chapter3/</url>
      <content type="text"><![CDATA[Vim 移动命令 命令 光标动作 j 向下移动一个实际行 gj 向下移动一个屏幕行 k 向上移动一个实际行 gk 向上移动一个屏幕行 0 移动到实际行的行首 g0 移动到屏幕行的行首 ^ 移动到实际行的第一个非空白字符 g^ 移动到屏幕行的第一个非空白字符 $ 移动到实际行的行尾 g$ 移动到屏幕行的行尾 命令 j、k、0、$ 都用来操作实际行，如果在之前加上 g 的话，就让 Vim 对屏幕行进行操作。 #### 基于单词的移动Vim 提供了一组动作命令，让我们每次可以把光标正向或反向移动一个单词的距离。| 命令 | 光标动作 || :–: | —————– || w | 正向移动到下一单词开头 || b | 反向移动到 当前/上一 单词的开头 || e | 正向移动到 当前/下一 单词的结尾 || ge | 反向移动到上一单词的词尾 | 基于上面的命令， 可以按下 ea 来“在当单词的词尾添加”。另外，也可以把 gea 命令当成“在上一单词词尾添加”的命令。 对字符的查找 Vim 的字符查找命令可以让我们在行内快速移动 f{char} 命令是在 Vim 中移动的最快方式之一。他会在光标位置与当前行行尾间查找指定字符，如果找到了，就把光标跳转到这个字符上；如果没找到，则保持光标不动。1234// before： 光标在句子开头的 “F” 处。Find the first occurrencr of &#123;char&#125; and move it.// 按下 **fx** 时，什么都不会做，因为在本行内光标之后没有字符 **x**，光标会保持不动。// 按下 **fo** 时，光标会跳到句子的第四个单词的字母 “o” 上 找到字符之后： 按下 ; 跳转到找到的下一个字符，如果按; 太hi按过头了，还可以按 , 返回到上一个字符。 通过查找进行移动虽然字符查找命令很方便快捷，但是它有个局限就是只能查找当前行的一个字符，要是想查找一个以上的字符或者多行查找的话，就需要用查找命令。 /words 可以查找当前光标之后名为 words 的字符（ 表示按下 Enter 键） ?words 可以查找当前光标之前名为 words 的字符 用精确的文本对象选择选区123var tpl = ['&lt;a href="#"&gt;&#123;title&#125;/a&gt;']; 比如有上面一段代码，光标在中间的“url”处： 按下 vi} 会使花括号内部的内容选中并高亮显示（此时高亮内容是 url）; 继续按下 a} 会使花括号连带内部内容都高亮显示（此时高亮的内容是{url}）； 现在要修改内容，此时光标在 “url” 处， 按下 ci”# 会成为下面这样12'&lt;a href="#"&gt;&#123;title&#125;/a&gt;''&lt;a href="#"&gt;&#123;title&#125;/a&gt;' 可以把上面的命令理解为“修改双引号内部的内容”。扩展一下： ci&lt; : 修改尖括号内的内容 yi{ : 复制花括号内的内容 da[ : 删除方括号的内容（包括方括号） 在匹配括号间跳转 % 命令可以在一对括号间跳转，他可以作用于 {}、[]、()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Vim 笔记 chapter2]]></title>
      <url>http://yoursite.com/2016/12/20/Vim%20chapter2/</url>
      <content type="text"><![CDATA[复制与粘贴Vim 的剪切、复制、粘贴有别于其他编辑器。 命令 Others Vim 复制 copy yank 剪切 cut delete 粘贴 paste put Vim 的 put 命令与粘贴命令完全相同。Vim 的 yank 命令等同于复制操作。至于为什么用 yank 而不是 copy ，这就是历史遗留原因了。 当时的 c 命令被用于 修改（change）操作了，所以被迫换成了 yank 这个名字。Vim 的 delete 也与标准的剪切操作一致。该命令会把指定文本复制到寄存器后再从文档中删掉。 用无名寄存器实现删除、复制与粘贴操作通常情况下，复制、粘贴和操作指的是操纵系统的剪贴板。在 Vim 中，操作的是寄存器。 调换字符 手速太快有时候会习惯性的输错某个单词，常见的比如两个字母的顺序输错了。1Practica lvim 上面把 “l” 和空格的顺序输入反了，现在我的光标在最后一个字母 “m” 上， 按下 F 在本行文本中找到光标之前的空格，按下 x 把光标下的字符剪切下来放到无名寄存器。最后按下 p 命令将无名寄存器的内容粘贴到光标后面。 最后把两个命令组合到一起，即 xp ，可以 “调换光标后的两个字符”，现在我的光标在最后一个字母 “m” 上， 按下 F 在前文中找到空格，按下 x 把光标下的字符剪切下来放到无名寄存器。最后按下 p 命令将无名寄存器的内容粘贴到光标后面。1Practical vim 调换文本行 类似的，也可以方便的调换两行文本的顺序。这次，用 dd 命令剪切当前行，将内容放到无名寄存器中，再按下 p 会把内容粘贴到当前行的下一行。 把命令连接起来即 ddp ,可以用来“调换当前行和它的下一行”。12345678// before 我是第二行 我是第一行 我是第三行// after 我是第一行 我是第二行 我是第三行 创建文本行的副本 类似调换文本行，创建文本行的副本只需要将剪切行的命令 dd 换成复制一行文本的命令 yy 即可，连起来是 yyp，可以用来“复制当前行并在下一行粘贴文本”。1234567// before 我是第一行 我是第二行// after 我是第一行 我是第一行 我是第二行 深入理解 Vim 寄存器引用一个寄存器 Vim 的删除、复制和粘贴都会用到众多寄存器中的一个 。 可以通过给命令加 “{register} 前缀的方式指定要用的寄存器。若不指明，Vim 将使用无名寄存器。 举例 如果想把当前单词复制到寄存器 a 中， 可以执行 “ayiw 。 把当前整行文本剪切到寄存器 b 中， 可以执行 “bdd 。 “ap 可以粘贴来及寄存器 a 的单词， “bp 可以粘贴来及寄存器 b 的一行文本，两者互不干扰。 无名寄存器（””）倘若我们没有指定使用寄存器， Vim 将缺省使用无名寄存器，它可以双引号表示。 举例 例如 “”p 这个命令，他完全等同于 p 命令。 复制专用寄存器 （”0） 当使用 y{motion} 命令时，要复制的文本不仅会拷贝到无名寄存器中，同时也拷贝到了复制专用寄存器中。后者可以用数字 “0” 加以引用。 举例 例如有以下代码12var myCat1 = new cat();var myCat2 = new dog(); 现在想要把 “dog” 换为 “cat”。若是之前不知道寄存器这个概念的话，场景会是这样： 光标到 “cat” 上面，按下 yiw 复制这个单词 把光标移动到 “dog” 上面，按下 diw 删除这个单词 按下 p 粘贴 变成傻逼：本来想粘贴 “cat” 的，结果粘贴的内容却是 “dog” ,第一步复制的 “cat” 不见了 发生这个问题原因是一直使用的是无名寄存器，当删除单词时，删除操作会把单词放到无名寄存器中，把之前复制的内容给“挤”走了。 现在有了复制专用寄存器就不虚了。在最后粘贴的时候按下 “0p 而不是 p 就完美的解决了这个问题。12var myCat1 = new cat();var myCat2 = new cat(); 有名寄存器（”a - “z） Vim 提供了一组以 26 个英文字母命名的寄存器，这意味着我们可以复制、剪切或者粘贴多达 26 段文本。上面改名字的问题使用有名寄存器也能很轻松地解决，这里就不再赘述了。 用小写字母引用有名寄存器，会覆盖该寄存器的原有内容。 用大写字母引用有名寄存器，会将新内容添加到原有内容之后。黑洞寄存器 （”_） 想要删除一段文本而不想保留副本时，黑洞寄存器就很管用了。 使用 “_diw 删除一个单词时， 不会将之前无名寄存器的内容覆盖。 系统剪切板（”+）与选择专用寄存器（”*） 到目前为止，讨论的寄存器都是 Vim 内部的，如果想从 Vim 复制内容到外部，则必须使用系统剪切板。 Vim 的加号寄存器与系统剪切板等效，可用 +号引用。比如现在从别的程序中复制了一段文本，在 Vim 中，就可以通过 “+p 命令将其粘贴到 Vim 内部。如果在 Vim 的复制、粘贴和剪切命令之前加上 “+ ，相应的文本会捕捉至系统剪切板。 在 Windows 和 Mac OS 中， “+ 寄存器 和 “* 寄存器 可以混用。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Vim 笔记chapter1]]></title>
      <url>http://yoursite.com/2016/12/20/Vim%20chapter1/</url>
      <content type="text"><![CDATA[逛图书馆居然找到一本 Vim 的书，是 Drew Neil 的《Vim 实用技巧》，想想刚开始用 Vim 痛不欲生的日子，（当然现在也是，只不过成了“活着就好”的状态，2333）然后考完试就立刻借来啦，Vim真的是贼好用，当然该开始学的时候确实痛苦，浏览器装个 Vimium 扩展， 简直爽的不要不要的，有了 Vim ，还要鼠标干嘛？ 看了一下这本书有 20 章，打算花 15 天左右慢慢看完，同时用 GVim（windows 的 Vim ）把笔记记下来 “.”的使用结识 . 命令 . 命令可以让我们重复上次的修改，他是 Vim 中最为强大的多面手。 这里写几个书上的例子。 光标在 Line 的位置上时，按下 x 会删除一个字符，之后按 . 就会重复上次操作，继续删除一个字符。 1234// beforeLine one// aftere one &gt;G 命令会给当前行到文档末尾添加一个缩进，在第二行使用 &gt;G 命令后，按 j 跳到下一行，接着再按下 . “重复上次修改”，就为每行文本添加缩进。 12345678910// beforeLine oneLine twoLine threeLine four// afterLine one Line two Line three Line four 不要自我重复 行尾添加内容这样很简单的操作，Vim 提供了一个专门的命令可以把两步操作合成为一步。 假设有这样的一个代码片段：123var vimIsGood = 'Vim da fa is good'var mdzz = 1var vim = vimIsGood + mdzz; 现在我想要给每行代码的结尾补上分号，一般的步骤是先按下 $ 将光标移动到行尾，接着按下 a 切换到输入模式，然后按下 ; 输入漏掉的分号，再按下 Esc 退出输入模式。 减少无关的移动 a 命令是在当前光标之后添加内容，而 A 是在当前的行尾添加内容。 对于上面的代码，只需要执行一次 A; 之后，然后就可以愉快的使用命令 j. 把每行代码末尾添加分号。123var vimIsGood = 'Vim da fa is good';var mdzz = 1;var vim = vimIsGood + vim; 以退为进 假设有这样一段代码1var foo = "("+argument1+","+argument2+")"; 看起来有点辣眼睛，因为上面的代码是黏成一片的，如果在 + 号前后都加上一个空格，看起来会舒服不少。 光标在代码开头处，按下 f+ 将光标移动到 + 处，然后按下 s 删除当前的 + 号并切换到输入模式，输入 +，在之前的 + 号出左右加上空格，然后按下 Esc 退出输入模式。 接下来的工作就 so easy 了，按下 ; 跳转到上次 f 命令所查找的字符，然后按下 . 来重复上次操作，简单来说就是连着按下 ;. 就可以在后面的 3 个 + 号左右都加上空格了。 操作完成后看起来一下舒服了不少。1var foo = "(" + argument1 + "," + argument2 + ")"; 查找并手动替换 Vim 提供了 :substitute 命令来进行查找替换 :s/target/replacement 方便是方便，但是遇上多义词就有点不合适了，比如：“我在方便的时候想方便一下”这句话，把方便都换为“撒尿”就不合适了。 写到这里好像遇到一个尴尬的问题，Vim 好像并不适合中文查找替换。用英文代替吧，毕竟不用中文撸码子。 比如有这样一段话1We'are waiting for content before .... If you are content with this, ... as soon as we have the content.. 刚开始，把光标移到 “content” 上，然后用 命令进行查找，按下 后，所有出现这个词的地方都会高亮显示。 当光标位于 “content” 开头时，接着按下 cw 删除光标位置到单词结尾间的字符，并进入插入模式，然后输入单词 “copy” 。Vim 会把我们离开插入模式之前的全部按键操作记录都记下来，所以刚才的过程 cwcopy 会被当作一个修改，也就是说，现在的 . 命令会删除当前光标到单词结尾处的字符，并把它修改为“copy”。接下来按下 n 键，光标会跳到下一个 “content” ,接着再按下 . 键时，会把光标下的单词换为“copy”。连起来就可以 n. n. 的操作了1We'are waiting for copy before .... If you are copy with this, ... as soon as we have the copy..]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[反思]]></title>
      <url>http://yoursite.com/2016/12/06/thinking-2016-12-6/</url>
      <content type="text"><![CDATA[哎，醒醒。该搬砖了。 最近的状态最近很闲，没什么课。心里总是这样想：“现在已经大三了，马上要毕业了，得赶紧学点东西”。但是到宿舍打开电脑之后总是默默的打开steam，然后打开CSGO满怀罪恶感的开始打枪，玩游戏的时候时间总是过的飞快，基本上每次轰轰烈烈的打完枪，一看时间都23:00了，感叹tm的一天又过去了，自己好像什么进步都没有。慌慌张张的想起来扇贝还没有背，躺床上之后过任务一样在5分钟之内把单词点完，然后自欺欺人的感觉自己今天至少没荒废，还学了几个单词。 我想改变 之前在刷知乎的时候看到一篇 live ：叫做“学不下去时，我用类比法自救” 想想自己浑浑噩噩的状态，毅然花了一瓶水的钱参加了，然后就继续hi（咸鱼）了。 直到昨天 live 20:00 开始，（不出意料的我没有按时参加，我当时是在打开 Android Studio 后卡在一个问题后就去刷网页了）之后看了 live 的记录，感觉都是我现在的痛点。在下面总结一下 live 顺便加一些自己的反思吧。 怎么学看名人自传迷茫的找不到方向的时候，看名人的自传，感受自己和他们的努力程度的差别，在这个年龄自己在做什么，他们在做什么（先不要去理会取得成就的差别）。 给自己暗示 一定要给自己暗示，去干其他事之前，先在脑海里问一下你干的事情有意义吗？能使自己进步吗？ 说服自己的潜意识，强迫自己执行习惯。 现在我手机的闹钟是 6:54 的，这个闹钟也是很久之前定的，当初的想法在是这个点起来刷牙洗脸之后到上课前（8:00）有大概半个小时的时间可以把扇贝解决了。 但是好像坚持了大概5天吧，主要是因为没有早上 8:00 的课了，然后就基本在没有起来过。 说出学到的知识把学到的知识翻译成”人话”讲给别人听或者写出来，不要在意有没有人阅读。 不要重复的看同一个知识点对于新学到的知识，不要单纯的看它的文字，要在别的地放把学到的知识应用。这样在能加深记忆。 高亮、划线没什么用，要总结总结总结 看书的时候，感觉遇到重点总是下意识的去划出来，但是最后感动的总是自己，却没什么卵用。哎呀，看我书上划了这么多重点，好有成就感啊！可是划出来就学会了吗？显然没有。 要及时总结，总结就是要你逼迫自己想学到了什么，不断的总结虽然痛苦但是很有用。 间歇复习，任务排期 临阵复(预)习，只是心理安慰，没什么用。 间歇复习作用很大，把任务排期，比如背单词， 好走的都是下坡路。 不要把听懂了的当做理解&amp;&amp;不要相信自己的记忆力 感觉听懂的知识，只是当时一瞬间听懂了，过一段时间在看，就完全忘记了。 及时记下来知识，防止忘记。 找个学习同伴一直想找个同伴，一起学习。一个人学真的很容易放弃，遇到困难没办法解决后，从一开始的兴趣渐渐演变成恐惧。然后放弃（大概就是现在的我）。找个能一起学习的同伴，及时分享遇到的问题及解决方法，那真是极好的，好的学习同伴就像好的伴侣一样，真的很难找。（活该单身） 找不到，先不写了 不要自己骗自己，不会就是不会排除干扰源遇到干扰自己注意力的东西，尽量让它离自己远一点。有点后悔买这个显示器了，分屏用的很爽，但是放在宿舍真的很难集中心思去学习，宿舍干扰源太多了，旁边打 lol 的太容易让人分心。 需要持续不断的高质量的鸡汤好鸡血 发现鸡汤真的还是有点用的，虽说没有能用一辈子的鸡汤，但是喝完一碗鸡汤之后，还是能收获一点学习的动力的。要刻意避免又空又大的伪鸡汤（类似某党的口号：大力发展xxx）。 #####几本书 《刻意练习》、《史蒂夫·乔布斯传》等等传记就不贴了 FLAG 立个 FLAG 现在尝试养成一个习惯吧 目标 每天按闹钟时间起床 洗漱完扇贝打卡 时间足够继续刷 freeCodeCamp 白天闲暇时间把 知米背单词 每天任务刷完 阅读上面的几本书，读书笔记写出来]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[扔掉烦人的数据线吧! Android无线调试]]></title>
      <url>http://yoursite.com/2016/10/22/Android%20wireless%20debug/</url>
      <content type="text"><![CDATA[让你的手机和 PC 处于同一网络中 连接同一个 WIFI 如果用笔记本的话(比如我) : 用猎豹WIFI开出一个网络,然后手机连接就好 开启网络 adb 调试(android 6.0)打开开发者选项 打开手机的设置 找到关于手机 找到 版本号 并狂按 6 次 , 会提示你已经开启开发者选项 进入设置 - 开发者选项 中 找到 网络 ADB 调试 打开开关会看到开关下面有 ip 和 端口 字样 记下这个数字 在 android 版本低于 6.0 的设备上开启无线调试 (需要 root ) 下载一个名为 adb wireless 的软件 点我下载 安装后打开 , 授予 root 权限后点击屏幕中间的按钮即可 ​ 在 PC 上打开命令行 win+R 输入 cmd 然后 Enter 输入 adb connect 192.168.191.3:5555 此处的 ip: 端口 为刚才我们在手机上看到的 此处可能有坑 , 需要在系统环境变量中加入 Android SDK , 否则只能在 SDK 的目录中运行 adb 命令 OK , 大功告成 ​]]></content>
    </entry>

    
  
  
</search>
